/**
 * Script para atualizar products.json com Shopify Variant IDs
 *
 * Pr√©-requisito: shopify-variant-mapping.json gerado
 *
 * Como usar:
 * node scripts/update-products-with-variants.js
 *
 * Ir√° atualizar: data/products.json
 */

const fs = require('fs')
const path = require('path')

// Caminhos
const productsPath = path.join(__dirname, '../data/products.json')
const mappingPath = path.join(__dirname, '../shopify-variant-mapping.json')
const backupPath = path.join(__dirname, '../data/products.backup.json')

// Verificar se mapeamento existe
if (!fs.existsSync(mappingPath)) {
  console.error('‚ùå Erro: shopify-variant-mapping.json n√£o encontrado!')
  console.error('Execute primeiro: node scripts/fetch-shopify-variant-ids.js')
  process.exit(1)
}

console.log('üì¶ Carregando dados...')

// Carregar arquivos
const productsData = JSON.parse(fs.readFileSync(productsPath, 'utf8'))
const mapping = JSON.parse(fs.readFileSync(mappingPath, 'utf8'))

console.log(`   Produtos: ${productsData.products.length}`)
console.log(`   Mapeamento: ${Object.keys(mapping).length} produtos`)

// Fazer backup
console.log('\nüíæ Criando backup...')
fs.writeFileSync(backupPath, JSON.stringify(productsData, null, 2), 'utf8')
console.log(`   Backup salvo: ${backupPath}`)

// Atualizar produtos
console.log('\nüîÑ Atualizando produtos...')

let updatedCount = 0
let skippedCount = 0

productsData.products = productsData.products.map((product) => {
  const productMapping = mapping[product.id]

  if (!productMapping) {
    console.warn(`‚ö†Ô∏è  Produto ${product.id} (${product.name}) n√£o encontrado no mapeamento`)
    skippedCount++
    return product
  }

  // Converter array de tamanhos para nova estrutura
  const currentSizes = Array.isArray(product.sizes)
    ? product.sizes.map(s => (typeof s === 'object' ? s.size : s))
    : []

  const newSizes = currentSizes.map((size) => {
    const variantData = productMapping.variants[size]

    if (!variantData) {
      console.warn(`   ‚ö†Ô∏è  Tamanho ${size} n√£o encontrado para ${product.name}`)
      return {
        size: size,
        shopifyVariantId: null,
      }
    }

    return {
      size: size,
      shopifyVariantId: variantData.shopifyVariantId,
      availableForSale: variantData.availableForSale,
    }
  })

  // Atualizar produto
  updatedCount++

  return {
    ...product,
    sizes: newSizes,
    shopifyProductId: productMapping.shopifyProductId,
    shopifyHandle: productMapping.shopifyHandle,
  }
})

// Salvar produtos atualizados
console.log('\nüíæ Salvando products.json...')
fs.writeFileSync(productsPath, JSON.stringify(productsData, null, 2), 'utf8')

console.log('\n‚úÖ Atualiza√ß√£o conclu√≠da!')
console.log(`üìä Produtos atualizados: ${updatedCount}`)
console.log(`‚ö†Ô∏è  Produtos pulados: ${skippedCount}`)
console.log(`üìÅ Arquivo: ${productsPath}`)
console.log(`üíæ Backup: ${backupPath}`)

// Estat√≠sticas
console.log('\nüìà Estat√≠sticas:')

let totalVariants = 0
let variantsWithIds = 0
let variantsWithoutIds = 0

productsData.products.forEach((product) => {
  if (Array.isArray(product.sizes)) {
    product.sizes.forEach((sizeObj) => {
      totalVariants++
      if (sizeObj.shopifyVariantId) {
        variantsWithIds++
      } else {
        variantsWithoutIds++
      }
    })
  }
})

console.log(`   Total de variantes: ${totalVariants}`)
console.log(`   ‚úÖ Com Shopify ID: ${variantsWithIds} (${((variantsWithIds / totalVariants) * 100).toFixed(1)}%)`)
console.log(`   ‚ùå Sem Shopify ID: ${variantsWithoutIds} (${((variantsWithoutIds / totalVariants) * 100).toFixed(1)}%)`)

if (variantsWithoutIds > 0) {
  console.log('\n‚ö†Ô∏è  Aten√ß√£o: Algumas variantes n√£o t√™m Shopify ID!')
  console.log('Isso pode acontecer se:')
  console.log('  1. Os tamanhos no Shopify n√£o correspondem aos locais')
  console.log('  2. Alguns produtos n√£o foram importados')
  console.log('  3. Houve erro na importa√ß√£o do CSV')
}

console.log('\n‚úÖ products.json atualizado com sucesso!')
console.log('\nüì§ Pr√≥ximo passo:')
console.log('1. Teste localmente: npm run dev')
console.log('2. Adicione ao carrinho e clique em "Finalizar Compra"')
console.log('3. Voc√™ deve ser redirecionado para checkout.shopify.com')
console.log('\nüéØ Migra√ß√£o completa!\n')
